import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from 'sonner';

interface BookingFormData {
  name: string;
  phone: string;
  email: string;
  period: string;
  startDate: string;
  isNewUser: boolean;
  password?: string;
}

export default function BookingForm() {
  const [formData, setFormData] = useState<BookingFormData>({
    name: '',
    phone: '',
    email: '',
    period: '',
    startDate: '',
    isNewUser: true,
    password: ''
  });

  const [totalPrice, setTotalPrice] = useState(0);

  const priceRates = {
    1: { rate: 990, label: '1 –ú–µ—Å—è—Ü 990‚ÇΩ/–º–µ—Å.' },
    3: { rate: 890, label: '3 –ú–µ—Å—è—Ü–∞ 890‚ÇΩ/–º–µ—Å.' },
    6: { rate: 790, label: '6 –ú–µ—Å—è—Ü–µ–≤ 790‚ÇΩ/–º–µ—Å.' },
    12: { rate: 790, label: '1 –ì–æ–¥ 790‚ÇΩ/–º–µ—Å.' }
  };

  const calculatePrice = (months: number) => {
    const rate = priceRates[months as keyof typeof priceRates]?.rate || 0;
    return rate * months;
  };

  const handlePeriodChange = (value: string) => {
    setFormData({ ...formData, period: value });
    setTotalPrice(calculatePrice(parseInt(value)));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name || !formData.phone || !formData.email || !formData.period || !formData.startDate) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    try {
      // Prepare form data for Formspree
      const formDataToSend = new FormData();
      formDataToSend.append('email', formData.email);
      formDataToSend.append('name', formData.name);
      formDataToSend.append('phone', formData.phone);
      formDataToSend.append('period', `${formData.period} –º–µ—Å—è—Ü(–µ–≤)`);
      formDataToSend.append('start_date', formData.startDate);
      formDataToSend.append('total_price', `${totalPrice.toLocaleString()}‚ÇΩ`);
      formDataToSend.append('user_type', formData.isNewUser ? '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      formDataToSend.append('message', `
üî• –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –Ø–ß–ï–ô–ö–ò! üî•

üë§ –ö–ª–∏–µ–Ω—Ç: ${formData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìß Email: ${formData.email}
‚è±Ô∏è –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: ${formData.period} –º–µ—Å—è—Ü(–µ–≤)
üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formData.startDate}
üí∞ –°—É–º–º–∞: ${totalPrice.toLocaleString()}‚ÇΩ
üë• –¢–∏–ø: ${formData.isNewUser ? '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

üìç –°–∫–ª–∞–¥: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ö–ª–∏–Ω, –¥–µ—Ä–µ–≤–Ω—è –ù–æ–≤–æ—â–∞–ø–æ–≤–æ, 16, —Å—Ç—Ä. 2
üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
      `);

      // Send to Formspree (which forwards to email and telegram)
      const response = await fetch('https://formspree.io/f/mnnznkww', {
        method: 'POST',
        body: formDataToSend,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        toast.success('üéâ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É –∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.');
        
        // Reset form
        setFormData({
          name: '',
          phone: '',
          email: '',
          period: '',
          startDate: '',
          isNewUser: true,
          password: ''
        });
        setTotalPrice(0);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      console.error('Form submission error:', error);
    }
  };

  return (
    <section id="–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" className="py-16 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
          </h2>
          
          <Card className="border-red-100">
            <CardHeader>
              <CardTitle className="text-red-600">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏</CardTitle>
              <CardDescription>–Ø—á–µ–π–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (1–º¬≥) - –æ—Ç 790‚ÇΩ –≤ –º–µ—Å—è—Ü</CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="new" className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="new" onClick={() => setFormData({...formData, isNewUser: true})}>
                    –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                  </TabsTrigger>
                  <TabsTrigger value="existing" onClick={() => setFormData({...formData, isNewUser: false})}>
                    –ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </TabsTrigger>
                </TabsList>
                
                <form onSubmit={handleSubmit} className="space-y-6 mt-6">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="period">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫</Label>
                      <Select value={formData.period} onValueChange={handlePeriodChange}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="1">{priceRates[1].label}</SelectItem>
                          <SelectItem value="3">{priceRates[3].label}</SelectItem>
                          <SelectItem value="6">{priceRates[6].label}</SelectItem>
                          <SelectItem value="12">{priceRates[12].label}</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="startDate">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è</Label>
                      <Input
                        id="startDate"
                        type="date"
                        value={formData.startDate}
                        onChange={(e) => setFormData({...formData, startDate: e.target.value})}
                        min={new Date().toISOString().split('T')[0]}
                      />
                    </div>
                  </div>

                  <TabsContent value="new" className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="name">–ò–º—è</Label>
                        <Input
                          id="name"
                          value={formData.name}
                          onChange={(e) => setFormData({...formData, name: e.target.value})}
                          placeholder="–í–∞—à–µ –∏–º—è"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                        <Input
                          id="phone"
                          value={formData.phone}
                          onChange={(e) => setFormData({...formData, phone: e.target.value})}
                          placeholder="+7 (999) 123-45-67"
                        />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({...formData, email: e.target.value})}
                        placeholder="your@email.com"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                      <Input
                        id="password"
                        type="password"
                        value={formData.password}
                        onChange={(e) => setFormData({...formData, password: e.target.value})}
                        placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
                      />
                    </div>
                  </TabsContent>

                  <TabsContent value="existing" className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="email-login">Email</Label>
                      <Input
                        id="email-login"
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({...formData, email: e.target.value})}
                        placeholder="your@email.com"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="password-login">–ü–∞—Ä–æ–ª—å</Label>
                      <Input
                        id="password-login"
                        type="password"
                        value={formData.password}
                        onChange={(e) => setFormData({...formData, password: e.target.value})}
                        placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å"
                      />
                    </div>
                  </TabsContent>
                  
                  {totalPrice > 0 && (
                    <div className="bg-red-50 p-4 rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="text-gray-700">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                        <span className="text-2xl font-bold text-red-600">{totalPrice.toLocaleString()}‚ÇΩ</span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        {priceRates[parseInt(formData.period) as keyof typeof priceRates]?.rate}‚ÇΩ/–º–µ—Å √ó {formData.period} {parseInt(formData.period) === 1 ? '–º–µ—Å—è—Ü' : '–º–µ—Å—è—Ü–µ–≤'}
                      </p>
                      {formData.startDate && (
                        <p className="text-sm text-gray-600">
                          –ù–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {new Date(formData.startDate).toLocaleDateString('ru-RU')}
                        </p>
                      )}
                    </div>
                  )}
                  
                  <Button type="submit" className="w-full bg-red-600 hover:bg-red-700" size="lg">
                    {formData.isNewUser ? '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É'}
                  </Button>
                </form>
              </Tabs>
            </CardContent>
          </Card>
        </div>
      </div>
    </section>
  );
}